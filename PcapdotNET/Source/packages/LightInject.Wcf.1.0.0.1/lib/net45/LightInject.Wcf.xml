<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LightInject.Wcf</name>
    </assembly>
    <members>
        <member name="T:LightInject.WcfContainerExtensions">
            <summary>
            Extends the <see cref="T:LightInject.IServiceContainer"/> interface with a method
            to enable services that are scoped per <see cref="T:System.ServiceModel.OperationContext"/>.
            </summary>    
        </member>
        <member name="M:LightInject.WcfContainerExtensions.EnableWcf(LightInject.IServiceContainer)">
            <summary>
            Ensures that services registered with the <see cref="T:LightInject.PerScopeLifetime"/> or <see cref="T:LightInject.PerRequestLifeTime"/> 
            is properly disposed at the end of an <see cref="T:System.ServiceModel.OperationContext"/>.        
            </summary>
            <param name="serviceContainer">The target <see cref="T:LightInject.IServiceContainer"/>.</param>
        </member>
        <member name="T:LightInject.TypeExtensions">
            <summary>
            Extends the <see cref="T:System.Type"/> class.
            </summary>
        </member>
        <member name="M:LightInject.TypeExtensions.IsServiceContract(System.Type)">
            <summary>
            Determines if the <paramref name="type"/> represents a service contract.
            </summary>
            <param name="type">The target <see cref="T:System.Type"/>.</param>
            <returns><b>true</b> if the <paramref name="type"/> represents a service type, otherwise <b>false</b>.</returns>
        </member>
        <member name="T:LightInject.Wcf.LightInjectWcfInitializer">
            <summary>
            Registers the <see cref="T:LightInject.Wcf.VirtualSvcPathProvider"/> with the current <see cref="T:System.Web.Hosting.HostingEnvironment"/>.
            </summary>
        </member>
        <member name="M:LightInject.Wcf.LightInjectWcfInitializer.Initialize">
            <summary>
            Executed before the <see cref="T:System.Web.HttpApplication"/> is started and registers
            the <see cref="T:LightInject.Wcf.VirtualSvcPathProvider"/> with the current <see cref="T:System.Web.Hosting.HostingEnvironment"/>.
            </summary>
        </member>
        <member name="T:LightInject.Wcf.LightInjectServiceHost">
            <summary>
            A subclass of the <see cref="T:System.ServiceModel.ServiceHost"/> class that allows 
            xml configuration to be applied.
            </summary>
        </member>
        <member name="M:LightInject.Wcf.LightInjectServiceHost.#ctor(System.Type,System.Uri[])">
            <summary>
            Initializes a new instance of the <see cref="T:LightInject.Wcf.LightInjectServiceHost"/> class with the type of service and its base addresses specified. 
            </summary>
            <param name="serviceType">The type of hosted service.</param>
            <param name="baseAddresses">An array of type <see cref="T:System.Uri"/> that contains the base addresses for the hosted service.</param>
        </member>
        <member name="M:LightInject.Wcf.LightInjectServiceHost.LoadConfiguration">
            <summary>
            Loads the service description from the configuration file and applies it to the runtime being constructed.
            </summary>
        </member>
        <member name="T:LightInject.Wcf.LightInjectServiceHostFactory">
            <summary>
            A <see cref="T:System.ServiceModel.Activation.ServiceHostFactory"/> that uses the LightInject <see cref="T:LightInject.ServiceContainer"/>
            to create WCF services.
            </summary>    
        </member>
        <member name="M:LightInject.Wcf.LightInjectServiceHostFactory.CreateServiceHost(System.String,System.Uri[])">
            <summary>
            Creates a <see cref="T:System.ServiceModel.ServiceHost"/> with specific base addresses and initializes it with specified data.
            </summary>
            <returns>
            A <see cref="T:System.ServiceModel.ServiceHost"/> with specific base addresses.
            </returns>
            <param name="constructorString">The initialization data passed to the <see cref="T:System.ServiceModel.ServiceHostBase"/> instance being constructed by the factory. </param><param name="baseAddresses">The <see cref="T:System.Array"/> of type <see cref="T:System.Uri"/> that contains the base addresses for the service hosted.</param><exception cref="T:System.ArgumentNullException"><paramref name="baseAddresses"/> is null.</exception><exception cref="T:System.InvalidOperationException">There is no hosting context provided or <paramref name="constructorString"/> is null or empty.</exception>
        </member>
        <member name="M:LightInject.Wcf.LightInjectServiceHostFactory.CreateServiceHost``1(System.String[])">
            <summary>
            Creates a <see cref="T:System.ServiceModel.ServiceHost"/> with the specified <paramref name="baseAddresses"/>.
            </summary>
            <typeparam name="TService">The type of service to be hosted by the <see cref="T:System.ServiceModel.ServiceHost"/>.</typeparam>
            <param name="baseAddresses">The base addresses for the hosted service.</param>
            <returns>A <see cref="T:System.ServiceModel.ServiceHost"/> for the specified <typeparamref name="TService"/>.</returns>
        </member>
        <member name="M:LightInject.Wcf.LightInjectServiceHostFactory.CreateServiceHost(System.Type,System.Uri[])">
            <summary>
            Creates a <see cref="T:System.ServiceModel.ServiceHost"/> for a specified type of service with a specific base address. 
            </summary>
            <returns>
            A <see cref="T:System.ServiceModel.ServiceHost"/> for the type of service specified with a specific base address.
            </returns>
            <param name="serviceType">Specifies the type of service to host. </param><param name="baseAddresses">The <see cref="T:System.Array"/> of type <see cref="T:System.Uri"/> that contains the base addresses for the service hosted.</param>
        </member>
        <member name="P:LightInject.Wcf.LightInjectServiceHostFactory.Container">
            <summary>
            Sets the <see cref="T:LightInject.IServiceContainer"/> instance that is 
            used to resolve services.
            </summary>
        </member>
        <member name="T:LightInject.Wcf.ServiceInterceptor">
            <summary>
            An <see cref="T:LightInject.Interception.IInterceptor"/> that ensures that a service operation is 
            executed within a <see cref="T:LightInject.Scope"/>.    
            </summary>    
        </member>
        <member name="M:LightInject.Wcf.ServiceInterceptor.#ctor(LightInject.IServiceContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:LightInject.Wcf.ServiceInterceptor"/> class.
            </summary>
            <param name="serviceContainer">The <see cref="T:LightInject.IServiceContainer"/> that is used to create the <see cref="T:LightInject.Scope"/>.</param>
        </member>
        <member name="M:LightInject.Wcf.ServiceInterceptor.Invoke(LightInject.Interception.IInvocationInfo)">
            <summary>
            Wraps the execution of a service operation inside a <see cref="T:LightInject.Scope"/>.
            </summary>
            <param name="invocationInfo">The <see cref="T:LightInject.Interception.IInvocationInfo"/> instance that 
            contains information about the current method call.</param>
            <returns>The return value from the method.</returns>
        </member>
        <member name="T:LightInject.Wcf.VirtualSvcFile">
            <summary>
            Represents a virtual .svc file. 
            </summary>    
        </member>
        <member name="M:LightInject.Wcf.VirtualSvcFile.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:LightInject.Wcf.VirtualSvcFile"/> class.
            </summary>
            <param name="virtualPath">The path to the virtual file.</param>
            <param name="content">The content of the virtual file.</param>
        </member>
        <member name="M:LightInject.Wcf.VirtualSvcFile.Open">
            <summary>
            When overridden in a derived class, returns a read-only stream to the virtual resource.
            </summary>
            <returns>
            A read-only stream to the virtual file.
            </returns>
        </member>
        <member name="T:LightInject.Wcf.VirtualSvcPathProvider">
            <summary>
            A <see cref="T:System.Web.Hosting.VirtualPathProvider"/> that enables WCF services to be hosted without creating .svc files.
            </summary>    
        </member>
        <member name="M:LightInject.Wcf.VirtualSvcPathProvider.GetCacheDependency(System.String,System.Collections.IEnumerable,System.DateTime)">
            <summary>
            Creates a cache dependency based on the specified virtual paths.
            </summary>
            <returns>
            A <see cref="T:System.Web.Caching.CacheDependency"/> object for the specified virtual resources.
            </returns>
            <param name="virtualPath">The path to the primary virtual resource.</param><param name="virtualPathDependencies">An array of paths to other resources required by the primary virtual resource.</param><param name="utcStart">The UTC time at which the virtual resources were read.</param>
        </member>
        <member name="M:LightInject.Wcf.VirtualSvcPathProvider.DirectoryExists(System.String)">
            <summary>
            Gets a value that indicates whether a directory exists in the virtual file system.
            </summary>
            <returns>
            true if the directory exists in the virtual file system; otherwise, false.
            </returns>
            <param name="virtualDir">The path to the virtual directory.</param>
        </member>
        <member name="M:LightInject.Wcf.VirtualSvcPathProvider.FileExists(System.String)">
            <summary>
            Gets a value that indicates whether a file exists in the virtual file system.
            </summary>
            <returns>
            true if the file exists in the virtual file system; otherwise, false.
            </returns>
            <param name="virtualPath">The path to the virtual file.</param>
        </member>
        <member name="M:LightInject.Wcf.VirtualSvcPathProvider.GetFile(System.String)">
            <summary>
            Gets a virtual file from the virtual file system.
            </summary>
            <returns>
            A descendent of the <see cref="T:System.Web.Hosting.VirtualFile"/> class that represents a file in the virtual file system.
            </returns>
            <param name="virtualPath">The path to the virtual file.</param>
        </member>
    </members>
</doc>
